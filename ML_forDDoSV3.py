import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
from sklearn.preprocessing import LabelEncoder
import joblib

# üìå **1. ‡πÇ‡∏´‡∏•‡∏î Dataset**
file_path = "./dataset/ML_Training_Dataset.csv"  # ‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
df = pd.read_csv(file_path)

# üìå **2. ‡πÅ‡∏õ‡∏•‡∏á Label ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç**
label_mapping = {"Normal": 0, "DoS": 1, "DDoS": 2, "Slowloris": 3}
df["Label"] = df["Label"].map(label_mapping)

# üìå **3. ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ Label Encoding**
categorical_columns = df.select_dtypes(include=['object']).columns.tolist()

# ‡πÉ‡∏ä‡πâ Label Encoding ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
label_encoders = {}
for col in categorical_columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß Encoder ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ

# üìå **4. ‡πÅ‡∏¢‡∏Å Features ‡πÅ‡∏•‡∏∞ Labels**
X = df.drop(columns=["Label"])  # Features
y = df["Label"]  # Target

# üìå **5. ‡πÅ‡∏ö‡πà‡∏á Train/Test 80:20**
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# üìå **6. Train Random Forest**
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# üìå **7. ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•**
y_pred = rf_model.predict(X_test)

acc = accuracy_score(y_pred, y_test)
print(acc)
# üìå **8. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Confusion Matrix**
plt.figure(figsize=(6,5))
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=label_mapping.keys(), yticklabels=label_mapping.keys())
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# üìå **9. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Accuracy, Precision, Recall, F1-score**
print("üìä **Classification Report:**")
print(classification_report(y_test, y_pred))

# üìå **10. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÅ‡∏•‡∏∞ Label Encoders**
model_filename = "RandomForest_Traffic_ModelV3.pkl"
encoder_filename = "LabelEncoders.pkl"

joblib.dump(rf_model, model_filename)
joblib.dump(label_encoders, encoder_filename)

print(f"‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå: {model_filename}")
print(f"‚úÖ Label Encoders ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå: {encoder_filename}")
